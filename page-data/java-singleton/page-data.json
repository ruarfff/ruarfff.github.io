{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-singleton/","result":{"data":{"site":{"siteMetadata":{"title":"Ruairí's Blog"}},"markdownRemark":{"id":"51698b62-0d2f-50f2-8c25-65630e208f9f","excerpt":"As the name suggests, a singleton is used when you want exactly one of something in you program. I remember in the early days of college a lot of people had…","html":"<p>As the name suggests, a singleton is used when you want exactly one of something in you program.</p>\n<p>I remember in the early days of college a lot of people had trouble grasping the concept of the static keyword in Java. I did too at first but then I figured out it basically meant you only want to have one of this thing.</p>\n<p>I got in to making games and ended up using the singleton pattern a lot. I did most of my Java programming on Android in college so using things that cost a little less memory became important.</p>\n<p>There is a lot of stuff on the internet about the singleton pattern written by people way more knowledgeable than me so I wont go in to it here.</p>\n<p>I will go in to how I implement a singleton in Java in my day to day work. I did a bit of research and came up with a template I was happy with. Here I am just providing this template that you can copy and past or make a file template with, depending on your choice of IDE.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingleton</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// This is just something I find useful for logging</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">TAG</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">MySingleton</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This is private so unscrupulous people can't go newing it</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// This is useful if you need to expose non-static methods</span>\n    <span class=\"token comment\">// You can do MySingleton.getInstance().myNonStaticMethod();</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">MySingleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">MySingleton_Holder</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">CloneNotSupportedException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CloneNotSupportedException</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TAG</span><span class=\"token operator\">+</span><span class=\"token string\">\" is a singleton! It can't be cloned.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n    * MySingleton_Holder is loaded on the first execution of MySingleton.getInstance() or\n    * the first access to MySingleton_Holder.INSTANCE, not before.\n    */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySingleton_Holder</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MySingleton</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","frontmatter":{"title":"Java Singleton","date":"February 01, 2012","description":null}},"previous":null,"next":{"fields":{"slug":"/javascript-singleton/"},"frontmatter":{"title":"JavaScript Singleton"}}},"pageContext":{"id":"51698b62-0d2f-50f2-8c25-65630e208f9f","previousPostId":null,"nextPostId":"6a645509-1002-54f0-9508-3b7b6a77c2cc"}},"staticQueryHashes":["2841359383","916993862"]}