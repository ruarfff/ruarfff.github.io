{"componentChunkName":"component---src-templates-blog-post-js","path":"/firing-phasers/","result":{"data":{"site":{"siteMetadata":{"title":"Ruairí's Blog"}},"markdownRemark":{"id":"0c0d5cea-3828-532a-9ced-97e33f329aba","excerpt":"TL;DR If you want to try my solution to developing with phaser 2 and es6, try this yeoman generator. What? A while back I discovered a HTML5 game development…","html":"<p><strong>TL;DR</strong> If you want to try my solution to developing with <a href=\"http://phaser.io/\">phaser 2</a> and es6, try <a href=\"https://www.npmjs.com/package/generator-fire-phaser\">this yeoman generator</a>.</p>\n<h3>What?</h3>\n<p>A while back I discovered a HTML5 game development framework called <a href=\"http://phaser.io/\">phaser</a>. It is really cool and a lot of fun to work with. This post is about how I set up a good and simple development environment to work with Phaser 2 and es6. If you’re interested in getting started with phaser or have just been looking for a good way to use it with es6 then you might find some of the details below useful.</p>\n<p>If by some amazing coincidence you happen to be struggling with getting a JavaScript library that relies on globals to work with some es6 build process, this post may also be of use to you.</p>\n<h3>Why?</h3>\n<p>When I first became a programmer all I wanted to do was make games. In my opinion games are the most fun thing to code. They are also a huge amount of work which is probably why I have yet to fully complete one beyond some basic efforts.</p>\n<p>I have half built games with XNA, C++, even… Java. Phaser is the best thing I have come across yet. Despite my love of coding games I just can’t put in all the effort required to make a fancy 3D thing so I love the quick and simple 2D games I can make with phaser. I even had my 7 year old son coding a little on a game and he loves seeing changes like making a character run faster or jump higher. If you want to get started making simple games I can’t recommend phaser enough.</p>\n<p>Anyway, since this is JavaScript I immediately hit a problem starting new game projects beyond a simple tutorial and this blog post is about how I got a workflow going that I like and that I wanted to share.</p>\n<p>Besides using phaser I did not want to complicate things by adding any other frameworks and I did not want a complicated build process. I just want to make a game and keep things as simple and fun as possible. I really want to use full blown es6 with modules though and that presented a small challenge. Phaser 2 has been around for some time and was not designed to work with es6. Soon phaser 3 will come out and this post will be obsolete but until then, here’s how I got a a nice setup for phaser 2 and es6.</p>\n<h3>How?</h3>\n<p>The first thing I tried to do was use <a href=\"https://babeljs.io/\">babel</a> and <a href=\"http://browserify.org/\">browserify</a> on the command line. I have used npm to install phaser and I had a simple JavaScript file that has an <code class=\"language-text\">import Phaser from 'phaser'</code> statement at the top. It didn’t start well. I was getting an error saying PIXI was not defined. After digging around the phaser source for a while I realized that the built phaser file assigned some dependencies on the global scope. I noticed that the <a href=\"https://www.npmjs.com/package/phaser\">phaser node module</a> had those dependencies separated into their own files too. It occurred to me that I would probably need to use webpack now.</p>\n<p>I always end up having to use webpack these days. Even though it’s a great tool, I always try not to use it because it just seems to add a bunch of complexity. Doesn’t seem to be any good way around it here though and I think the config I use is simple enough to be OK.</p>\n<p>I had come across the webpack <a href=\"https://github.com/webpack/expose-loader\">expose-loader</a> module before and it appears to solve the particular issue of using a library that relies on globals. I did pause to wonder if it was worth the effort now just so I would use <code class=\"language-text\">import Phase from 'phaser'</code> instead of <code class=\"language-text\">Phaser</code> as a global and decided it was.</p>\n<p>The module loaders are configured like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> pixiiJs <span class=\"token operator\">=</span> <span class=\"token string\">'pixi.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> p2Js <span class=\"token operator\">=</span> <span class=\"token string\">'p2.js'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    loaders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.css$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> loader<span class=\"token operator\">:</span> <span class=\"token string\">'style-loader!css-loader'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.js$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> exclude<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> loader<span class=\"token operator\">:</span> <span class=\"token string\">\"babel-loader\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> test<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.json$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> loader<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> test<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>pixiiJs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loader<span class=\"token operator\">:</span> <span class=\"token string\">'expose?PIXI'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> test<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>p2Js<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> loader<span class=\"token operator\">:</span> <span class=\"token string\">'expose?p2'</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">{ test: /\\.css$/, loader: 'style-loader!css-loader' }</code> Allows importing of css files in scripts at build time using <a href=\"https://github.com/webpack/css-loader\">css-loader</a>. Totally optional. I just like that way of getting css in to the page.</p>\n<p><code class=\"language-text\">{ test: /\\.js$/, exclude: /node_modules/, loader: \"babel-loader\" }</code> This converts our es6 code to es5 for browser support.</p>\n<p><code class=\"language-text\">{ test: /\\.json$/, loader: 'json' }</code> For importing JSON files to scripts at build time.</p>\n<p><code class=\"language-text\">{ test: new RegExp(pixiiJs), loader: 'expose?PIXI' }</code> This will assign PIXI to the global object when it gets imported in our es6 code. We do need to have <code class=\"language-text\">import 'pixi'</code> in the entry point of our code. We do not need to use the global object in our code but it is there for phaser to use.</p>\n<p><code class=\"language-text\">{ test: new RegExp(p2Js), loader: 'expose?p2' }</code> Same as with PIXI, we are putting this on the global object for phaser to use. We also need <code class=\"language-text\">import 'p2'</code> in the entry point of our code.</p>\n<p>That was pretty much the only tricky part.</p>\n<p>I am going to be working on a few games in parallel and will probably never finish any of them, so to help with that I created a yeoman generator that will generate a project with a webpack configuration and some sample phaser code written in es6.</p>\n<p>If you would like to use it or just want to see what I needed to do to get it all set up run this command (assuming you have nodejs installed)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -g yo generator-fire-phaser</code></pre></div>\n<p>Or for yarn (assuming you also installed yeoman globally with yarn)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yarn global add generator-fire-phaser</code></pre></div>\n<p>Then in an empty directory run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">yo fire-phaser</code></pre></div>\n<p>You’ll be prompted to answer a few questions that will be used to name the project and set some text in it.</p>\n<p>The reference code in there might be handy for seeing how to structure ES6 code with phaser too.</p>\n<p>The Github repo for the generator is <a href=\"https://github.com/ruarfff/generator-fire-phaser\">here</a>.</p>\n<p>Hope you make some games!</p>","frontmatter":{"title":"Start Game Coding in ES6","date":"November 10, 2016","description":null}},"previous":{"fields":{"slug":"/communication/"},"frontmatter":{"title":"About Communication"}},"next":{"fields":{"slug":"/kube-intro/"},"frontmatter":{"title":"Introduction to Kubernetes"}}},"pageContext":{"id":"0c0d5cea-3828-532a-9ced-97e33f329aba","previousPostId":"e7553e2e-156f-53af-98aa-292c396e4e8a","nextPostId":"d67f5521-63b8-5c4f-bd51-a2ed25e76407"}},"staticQueryHashes":["2841359383","916993862"]}